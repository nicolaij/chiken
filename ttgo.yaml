esphome:
  name: ttgo
  platform: ESP32
  board: featheresp32
  platformio_options:
    upload_speed: 921600
  on_boot:
    then: 
      - ds1307.read_time
      - script.execute: set_climate

wifi:
  ssid: "WiFi_SSID"
  password: "WiFi_password"
  reboot_timeout: 0s
  # Enable fallback hotspot (captive portal) in case wifi connection fails
  ap:
    ssid: "chiken"
    password: "123123123"

captive_portal:

# Enable logging
logger:
  level: DEBUG

web_server:
  port: 80
  
# Enable Home Assistant API
api:
  password: "some_api_password"
  reboot_timeout: 0s

ota:
  password: "some_ota_password"

globals:
  - id: set_sntp_time
    type: int
    restore_value: no
    initial_value: '-1'
  - id: menu_pos
    type: int
    restore_value: no
    initial_value: '0'
  - id: t_low_climate
    type: float
    restore_value: yes
    initial_value: '20'
  - id: t_high_climate
    type: float
    restore_value: yes
    initial_value: '23'
  - id: time_korm
    type: int
    restore_value: yes
    initial_value: '20'


color:
  - id: my_red
    red: 100%
    green: 0%
    blue: 0%
  - id: my_yellow
    red: 100%
    green: 100%
    blue: 0%
  - id: my_gb
    red: 0%
    green: 100%
    blue: 100%
  - id: my_green
    red: 0%
    green: 100%
    blue: 0%
  - id: my_blue
    red: 0%
    green: 0%
    blue: 100%
  - id: my_gray
    red: 50%
    green: 50%
    blue: 50%
  - id: my_white
    red: 100%
    green: 100%
    blue: 100%
  - id: my_black
    red: 0%
    green: 0%
    blue: 0%

font:
  - file: "fonts/BebasNeue-Regular.ttf"
    id: bebas_48
    size: 48
  - file: "fonts/BebasNeue-Regular.ttf"
    id: bebas_24
    size: 24
  - file: "fonts/BebasNeue-Regular.ttf"
    id: bebas_36
    size: 36
  - file: "fonts/tahomabd.ttf"
    id: tahoma_clock
    size: 80
  - file: "fonts/tahomabd.ttf"
    id: tahoma_16
    size: 16


script:
  - id: korm
    then:
      - switch.turn_on: relay4
      - component.update: my_display  
      - delay: !lambda "return id(time_korm)*1000;"
      - switch.turn_off: relay4
      - component.update: my_display
  - id: set_climate
    then:
      lambda: |-
          auto call1 = id(cli_1).make_call();
          call1.set_mode("AUTO");
          call1.set_target_temperature_low(id(t_low_climate));
          call1.set_target_temperature_high(id(t_high_climate));
          call1.perform();
          auto call2 = id(cli_2).make_call();
          call2.set_mode("AUTO");
          call2.set_target_temperature_low(id(t_low_climate));
          call2.set_target_temperature_high(id(t_high_climate));
          call2.perform();

text_sensor:
  - platform: template
    name: "Current time"
    lambda: |-
      char str[30];
      time_t currTime = id(rtc_time).now().timestamp;
      strftime(str, sizeof(str), "%Y-%m-%d %H:%M:%S", localtime(&currTime));
      return { str };
    update_interval: 60s
  - platform: wifi_info
    ip_address:
      name: ESP IP Address
    ssid:
      name: ESP Connected SSID
    bssid:
      name: ESP Connected BSSID
    mac_address:
      name: ESP Mac Wifi Address

binary_sensor:
  - platform: status
    name: "Node Status"
    id: system_status
  - platform: gpio
    pin:
      number: GPIO2
      inverted: true
      mode: INPUT_PULLUP
    id: level
    on_state:
      then:
        - component.update: my_display            
  - platform: gpio
    pin:
      number: GPIO0
      inverted: true
      mode: INPUT_PULLUP
    name: "T-Display Button Input 0"
    id: tdisplay_button_input_0
    on_press:
      then:
        - cover.close: doorcover 
  - platform: gpio
    pin:
      number: GPIO35
      inverted: true
      mode: INPUT_PULLUP
    name: "T-Display Button Input 1"
    id: tdisplay_button_input_1
    on_press:
      then:
        - cover.open: doorcover
  - platform: gpio
    pin:
      number: GPIO32
      inverted: true
    name: "Button Door Open"
    id: button_input_32
    on_press:
        if:
          condition:
            switch.is_on: close_cover_switch
          then:
            - cover.stop: doorcover
          else:
            - cover.open: doorcover
  - platform: gpio
    pin:
      number: GPIO39
      inverted: true
    name: "Button Door Close"
    id: button_input_39
    on_press:
        if:
          condition:
            switch.is_on: open_cover_switch
          then:
            - cover.stop: doorcover
          else:
            - cover.close: doorcover
  - platform: gpio
    pin:
      number: GPIO38
      inverted: true
      mode: INPUT_PULLUP
    name: "Encoder button"
    on_click:
      min_length: 50ms
      then:
        - lambda: |-
            id(menu_pos) = id(menu_pos) + 1;
            if (id(menu_pos) > 6) id(menu_pos) = 0;
            switch(id(menu_pos))
            {
                case 1:           
                    id(rotary_encoder1).set_value(id(t_low_climate));                    
                  break;
                case 2:
                    id(rotary_encoder1).set_value(id(t_high_climate));                    
                  break;
                case 3:
                    id(rotary_encoder1).set_value(id(time_korm));                    
                  break;
                case 4: /*KORM ON*/
                case 5: /*DOOR ON*/
                case 6: /*LIGHT ON*/
                    id(rotary_encoder1).set_value(1);
                  break;
                default:
                    auto call1 = id(cli_1).make_call();
                    call1.set_mode("AUTO");
                    call1.set_target_temperature_low(id(t_low_climate));
                    call1.set_target_temperature_high(id(t_high_climate));
                    call1.perform();
                    auto call2 = id(cli_2).make_call();
                    call2.set_mode("AUTO");
                    call2.set_target_temperature_low(id(t_low_climate));
                    call2.set_target_temperature_high(id(t_high_climate));
                    call2.perform();
                  break;
            };
        - component.update: my_display  

i2c:
  sda: 21
  scl: 22
  scan: True
  id: bus_a
  frequency: 100kHz

pcf8574:
  - id: 'pcf8574_hub'
    address: 0x20
    pcf8575: False
  
sensor:
  - platform: dht
    model: AM2302
    pin: 15
    temperature:
      name: "Temperature 1"
      id: dht_t1
    humidity:
      name: "Humidity 1"
      id: dht_h1
    update_interval: 60s
  - platform: dht
    model: AM2302
    pin: 13
    temperature:
      name: "Temperature 2"
      id: dht_t2
    humidity:
      name: "Humidity 2"
      id: dht_h2
    update_interval: 60s
    
  # Uptime sensor.
  - platform: uptime
    name: Uptime

  # WiFi Signal sensor.
  - platform: wifi_signal
    name: WiFi Signal
    update_interval: 60s
    
  - platform: rotary_encoder
    name: "Rotary Encoder 1"
    id: rotary_encoder1
    pin_a: GPIO17
    pin_b: GPIO37
    min_value: 0
    max_value: 99
    on_value:
      then:
        - lambda: |-
            switch(id(menu_pos))
            {
                case 1:
                    id(t_low_climate) = id(rotary_encoder1).state;
                  break;
                case 2:
                    id(t_high_climate) = id(rotary_encoder1).state;
                  break;
                case 3:
                    id(time_korm) = id(rotary_encoder1).state;
                  break;
                case 4:
                    if (id(rotary_encoder1).state != 1)
                    {
                      if (id(relay4).state) 
                        id(relay4).turn_off();
                      else
                        id(relay4).turn_on();
                    }
                  break;
                case 5:
                  if (id(rotary_encoder1).state != 1)
                  {
                    auto call = id(doorcover).make_call();
                    if (id(rotary_encoder1).state > 1)
                      call.set_command_open();
                    if (id(rotary_encoder1).state < 1)
                      call.set_command_close();
                    call.perform();
                    id(rotary_encoder1).set_value(1);  
                  }
                  break;
                case 6:
                  if (id(rotary_encoder1).state != 1)
                  {
                      if (id(relay3).state) 
                        id(relay3).turn_off();
                      else
                        id(relay3).turn_on();
                  }
                  break;
            };
        - component.update: my_display

# We can still control the backlight independently
switch:
  - platform: gpio
    pin: GPIO4
    name: "Backlight"
    id: backlight
  - platform: gpio
    pin: GPIO25
    name: "Enable Cover"
    id: enable_cover_switch
  - platform: gpio
    pin: GPIO27
    name: "Open Cover"
    id: open_cover_switch
  - platform: gpio
    pin: GPIO26
    name: "Close Cover"
    id: close_cover_switch
  - platform: gpio
    name: "Relay 1"
    restore_mode: ALWAYS_OFF
    id: relay1
    pin:
      pcf8574: pcf8574_hub
      number: 0
      mode: OUTPUT
      inverted: True
  - platform: gpio
    name: "Relay 2"
    id: relay2
    restore_mode: ALWAYS_OFF
    pin:
      pcf8574: pcf8574_hub
      number: 1
      mode: OUTPUT
      inverted: True
  - platform: gpio
    name: "Relay 3"
    id: relay3
    restore_mode: ALWAYS_OFF
    pin:
      pcf8574: pcf8574_hub
      number: 2
      mode: OUTPUT
      inverted: True
  - platform: gpio
    name: "Relay 4"
    id: relay4
    restore_mode: ALWAYS_OFF
    pin:
      pcf8574: pcf8574_hub
      number: 3
      mode: OUTPUT
      inverted: True

time:
  - platform: sntp
    id: sntp_time
    timezone: "Europe/Minsk"
    on_time_sync:
      then:
        - logger.log: "Synchronized system clock"
    on_time:
      #обновляем RTC
      - seconds: 0
        minutes: /5
        then:
          if:
            condition:
              and:
                - wifi.connected:
                - lambda: 'return id(set_sntp_time) < 0;'
            then:
              - logger.log: "Synchronized rtc"              
              - lambda: |-
                  auto time = id(sntp_time).now();
                  if(time.is_valid()) {
                    id(rtc_time).write_time();
                  }
              - globals.set:
                  id: set_sntp_time
                  value: '0'      

  - platform: ds1307
    id: rtc_time
    update_interval: never
    timezone: "Europe/Minsk"
    on_time:
      #Свет включаем
      - seconds: 0
        minutes: 0
        hours: 7,18
        then:
          - switch.turn_on: relay3
      #Свет выключаем
      - seconds: 0
        minutes: 0
        hours: 9,22
        then:
          - switch.turn_off: relay3
      #Кормежка
      - seconds: 0
        minutes: 0
        hours: 8,13,18
        then:
          - script.execute: korm

output:
  - platform: ledc
    pin: GPIO33
    id: pwm_cover_switch
    
cover:
  - platform: time_based
    name: "Door"
    id: doorcover
    open_action:
      - switch.turn_on: enable_cover_switch
      - output.set_level:
            id: pwm_cover_switch
            level: "50%"
      - switch.turn_on: open_cover_switch
      - component.update: my_display  
    open_duration: 5s

    close_action:
      - switch.turn_on: enable_cover_switch
      - output.set_level:
            id: pwm_cover_switch
            level: "50%"
      - switch.turn_on: close_cover_switch
      - component.update: my_display  
    close_duration: 5s

    stop_action:
      - switch.turn_off: open_cover_switch
      - switch.turn_off: close_cover_switch    
      - switch.turn_off: enable_cover_switch
      - component.update: my_display  
      
spi:
  clk_pin: GPIO18
  mosi_pin: GPIO19

display:
  - platform: st7789v
    backlight_pin: GPIO4
    cs_pin: GPIO5
    dc_pin: GPIO16
    reset_pin: GPIO23
    rotation: 90
    id: my_display
    lambda: |-
        if (id(menu_pos) == 0)
        {
          it.rectangle(0,  0, it.get_width(), it.get_height(), id(my_blue));
          it.rectangle(0, 38, it.get_width(), it.get_height(), id(my_blue));
          it.line(it.get_width() /2 , 0, it.get_width() / 2 , 38, id(my_blue));
          it.line(0 , it.get_height() - 22, it.get_width() , it.get_height() - 22, id(my_blue));
  
          it.printf(57, 5, id(bebas_36), id(my_yellow), TextAlign::TOP_RIGHT, "%d°C", (int)(id(dht_t1).state + 0.5f));
          it.printf(117, 5, id(bebas_36), id(my_gb), TextAlign::TOP_RIGHT, "%d%%", (int)(id(dht_h1).state + 0.5f));
  
          it.printf(177, 5, id(bebas_36), id(my_yellow), TextAlign::TOP_RIGHT, "%d°C", (int)(id(dht_t2).state + 0.5f));
          it.printf(237, 5, id(bebas_36), id(my_gb), TextAlign::TOP_RIGHT, "%d%%", (int)(id(dht_h2).state + 0.5f));
  
          it.strftime((240 / 2), 72, id(tahoma_clock), id(my_white), TextAlign::CENTER, "%H:%M", id(rtc_time).now());
            
          if (id(relay1).state)
            it.filled_rectangle(1, it.get_height() - 21, 28, 20, id(my_red));
          else
            it.filled_rectangle(1, it.get_height() - 21, 28, 20, id(my_gray));
            
          it.print(1 + 15, it.get_height() - 11, id(tahoma_16), id(my_black), TextAlign::CENTER, "1");

          if (id(relay2).state)
            it.filled_rectangle(31, it.get_height() - 21, 28, 20, id(my_red));
          else
            it.filled_rectangle(31, it.get_height() - 21, 28, 20, id(my_gray));
          
          it.print(31 + 15, it.get_height() - 11, id(tahoma_16), id(my_black), TextAlign::CENTER, "2");
          
          if (id(relay3).state)
            it.filled_rectangle(61, it.get_height() - 21, 28, 20, id(my_red));
          else
            it.filled_rectangle(61, it.get_height() - 21, 28, 20, id(my_gray));
          
          it.print(61 + 15, it.get_height() - 11, id(tahoma_16), id(my_black), TextAlign::CENTER, "3");
          
          if (id(relay4).state)
            it.filled_rectangle(91, it.get_height() - 21, 28, 20, id(my_red));
          else
            it.filled_rectangle(91, it.get_height() - 21, 28, 20, id(my_gray));
            
          it.print(91 + 15, it.get_height() - 11, id(tahoma_16), id(my_black), TextAlign::CENTER, "4");

          if (id(level).state)
            it.filled_rectangle(121, it.get_height() - 21, 28, 20, id(my_blue));
          else
            it.filled_rectangle(121, it.get_height() - 21, 28, 20, id(my_gray));
            
          it.print(121 + 15, it.get_height() - 11, id(tahoma_16), id(my_black), TextAlign::CENTER, "L");

          if (id(doorcover).position == 1.0f)
          {
            it.filled_rectangle(it.get_width() - 81, it.get_height() - 21, 80, 20, id(my_green));
            it.print(it.get_width() - 40, it.get_height() - 11, id(tahoma_16), id(my_black), TextAlign::CENTER, "OPEN");
          }
          else
          {
            it.filled_rectangle(it.get_width() - 81, it.get_height() - 21, 80, 20, id(my_gray));
            it.print(it.get_width() - 40, it.get_height() - 11, id(tahoma_16), id(my_black), TextAlign::CENTER, "CLOSE");
          };
        }else /* ВЫВОДИМ МЕНЮ*/
        { const int ys = 34;
          it.printf(5, 2, id(bebas_36), id(my_yellow), TextAlign::TOP_LEFT, "Climate:  %2d - %2d", (int)id(t_low_climate), (int)id(t_high_climate));
          it.printf(5, 2 + ys, id(bebas_36), id(my_yellow), TextAlign::TOP_LEFT, "KORM:  %2d s", (int)id(time_korm));
          if (id(relay4).state)
            it.printf(230, 2 + ys, id(bebas_36), id(my_yellow), TextAlign::TOP_RIGHT, "  ON");
          else
            it.printf(230, 2 + ys, id(bebas_36), id(my_yellow), TextAlign::TOP_RIGHT, "OFF");

          it.printf(5, 2 + ys + ys, id(bebas_36), id(my_yellow), TextAlign::TOP_LEFT, "DOOR:");
          if (id(doorcover).position == 1.0f)
            it.printf(230, 2 + ys + ys, id(bebas_36), id(my_yellow), TextAlign::TOP_RIGHT, "CLOSE");
          else
            it.printf(230, 2 + ys + ys, id(bebas_36), id(my_yellow), TextAlign::TOP_RIGHT, " OPEN");
          
          it.printf(5, 2 + ys + ys + ys, id(bebas_36), id(my_yellow), TextAlign::TOP_LEFT, "light:");
          if (id(relay3).state)
            it.printf(230, 2 + ys + ys + ys, id(bebas_36), id(my_yellow), TextAlign::TOP_RIGHT, "  ON");
          else
            it.printf(230, 2 + ys + ys + ys, id(bebas_36), id(my_yellow), TextAlign::TOP_RIGHT, "OFF");          
          switch(id(menu_pos))
          {
            case 1:
                it.rectangle(110,  0, 40, ys, id(my_blue));
              break;
            case 2:
                it.rectangle(160,  0, 40, ys, id(my_blue));
              break;
            case 3:/*KORM TIME*/
                it.rectangle(80,  ys, 40, ys, id(my_blue));
              break;
            case 4: /*KORM ON*/
                it.rectangle(160,  ys, 80, ys, id(my_blue));
              break;
            case 5: /*DOOR ON*/
                it.rectangle(160, ys*2, 80, ys, id(my_blue));
              break;
            case 6: /*LIGHT ON*/
                it.rectangle(160,  ys*3, 80, ys, id(my_blue));
              break;
          }
        }

        
climate:
  - platform: bang_bang 
    name: "Climate Controller 1"
    id: cli_1
    sensor: dht_t1
    default_target_temperature_low: 24 °C
    default_target_temperature_high: 26 °C

    heat_action:
      - switch.turn_on: relay1
      - component.update: my_display  
    idle_action:
      - switch.turn_off: relay1
      - component.update: my_display  

  - platform: bang_bang 
    name: "Climate Controller 2"
    sensor: dht_t2
    id: cli_2
    default_target_temperature_low: 24 °C
    default_target_temperature_high: 26 °C

    heat_action:
      - switch.turn_on: relay2
      - component.update: my_display  
    idle_action:
      - switch.turn_off: relay2
      - component.update: my_display  
